# Generated by Django 5.0.4 on 2025-10-26 16:47
import os
import csv
from django.db import migrations

# --- Define la ruta al archivo CSV ---
# Esto asume que 'ciiu.csv' está EN LA MISMA CARPETA que este archivo de migración
CSV_PATH = os.path.join(os.path.dirname(__file__), 'ciiu.csv')

def poblar_datos(apps, schema_editor):
    """
    Lee el archivo CSV y puebla el modelo Ciuu, manejando la
    relación recursiva de 'padre'.
    """
    # Obtenemos el modelo 'Ciuu' de la app 'tu_app'
    # ¡IMPORTANTE! No importes el modelo directamente (ej. from ..models import Ciuu)
    # Usa apps.get_model para obtener la versión "histórica" del modelo.
    Ciuu = apps.get_model('stela', 'Ciuu') # 👈 Reemplaza 'tu_app'
    
    # Un diccionario para rastrear los objetos padre que ya hemos creado
    # Clave: 'codigo' (string), Valor: objeto Ciuu
    padres_creados = {}
    
    # --- Añadimos prints para depurar ---
    print(f"\n[Seeder] Abriendo archivo en: {CSV_PATH}")

    try:
        with open(CSV_PATH, mode='r', encoding='utf-8') as file:
            reader = csv.DictReader(file)
            print("[Seeder] Archivo CSV abierto. Poblando datos...")
            
            count = 0
            for row in reader:
                codigo_padre = row.get('codigo_padre')
                padre_obj = None

                # Si tiene un código de padre, búscalo en nuestro diccionario
                if codigo_padre:
                    padre_obj = padres_creados.get(codigo_padre)

                # Creamos el nuevo objeto Ciuu
                ciiu_obj = Ciuu.objects.create(
                    codigo=row['codigo'],
                    descripcion=row['descripcion'],
                    nivel=int(row['nivel']),
                    padre=padre_obj
                )
                
                # Guardamos este objeto en el diccionario por si es padre de otro
                padres_creados[ciiu_obj.codigo] = ciiu_obj
                count += 1
            
            print(f"[Seeder] ¡Éxito! Se crearon {count} registros.")

    except FileNotFoundError:
        print(f"\n[Seeder] ¡ERROR! No se encontró el archivo CSV en la ruta: {CSV_PATH}")
    except Exception as e:
        print(f"\n[Seeder] ¡ERROR INESPERADO!: {e}")


class Migration(migrations.Migration):

    dependencies = [
        ('stela', '0002_alter_ciuu_codigo'),
    ]

    operations = [
        
        migrations.RunPython(poblar_datos),
    ]
